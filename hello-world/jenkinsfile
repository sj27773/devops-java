pipeline {
    agent any
    tools {
        jdk 'jdk17'
        maven 'maven3'
    }
    environment {
        SCANNER_HOME = tool 'sonar-scanner'
    }
    stages {
        stage('clean workspace') {
            steps {
                cleanWs()
            }
        }
        stage('Checkout From Git') {
            steps {
                git branch: 'main', url: 'https://github.com/sj27773/devops-java.git'
            }
        }
        stage('mvn compile') {
            steps {
                sh 'mvn clean compile'
            }
        }
        stage('mvn test') {
            steps {
                sh 'mvn test'
            }
        }
        stage("Sonarqube Analysis") {
            steps {
                withSonarQubeEnv('sonar-server') {
                    sh ''' 
                    $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=Pet-Clinic \
                    -Dsonar.java.binaries=. \
                    -Dsonar.projectKey=Petclinic 
                    '''
                }
            }
        }
        stage("quality gate") {
            steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'sonar-token'
                }
            }
        }
        stage('mvn build') {
            steps {
                sh 'mvn clean install'
            }
        }
        stage("OWASP Dependency Check") {
            steps {
                dependencyCheck additionalArguments: '--scan ./ --format HTML ', odcInstallation: 'DP-Check'
                dependencyCheckPublisher pattern: '**/dependency-check-report.html'
            }
        }
        stage("Docker Build & Push") {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker', toolName: 'docker') {
                        sh "docker build -t petclinic1 ."
                        sh "docker tag petclinic1 sj27773/petclinic:latest"
                        sh "docker push sj27773/petclinic:latest"
                    }
                }
            }
        }
        stage('Clean up containers') {
            steps {
                script {
                    try {
                        sh 'docker stop pet1'
                        sh 'docker rm pet1'
                    } catch (Exception e) {
                        echo "Container pet1 not found, moving to next stage"
                    }
                }
            }
        }
        stage('Manual Approval') {
            steps {
                script {
                    timeout(time: 10, unit: 'MINUTES') {
                        def approvalMailContent = """
                        Project: ${env.JOB_NAME}
                        Build Number: ${env.BUILD_NUMBER}
                        Go to build URL and approve the deployment request.
                        URL de build: ${env.BUILD_URL}
                        """
                        mail(
                            to: 'sj2848000@gmail.com',
                            subject: "${currentBuild.result} CI: Project name -> ${env.JOB_NAME}",
                            body: approvalMailContent,
                            mimeType: 'text/plain'
                        )
                        input(
                            id: "DeployGate",
                            message: "Deploy ${params.project_name}?",
                            submitter: "approver",
                            parameters: [choice(name: 'action', choices: ['Deploy'], description: 'Approve deployment')]
                        )
                    }
                }
            }
        }
        stage('Deploy to container') {
            steps {
                sh 'docker run -d --name pet1 -p 8082:8080 sj27773/petclinic:latest'
            }
        }
        stage("Deploy To Tomcat") {
            steps {
                sh "sudo cp /var/lib/jenkins/workspace/Pet-Clinic/target/petclinic.war /opt/apache-tomcat-9.0.65/webapps/"
            }
        }
    }
    post {
        always {
            emailext attachLog: true,
                subject: "'${currentBuild.result}'",
                body: "Project: ${env.JOB_NAME}<br/>" +
                    "Build Number: ${env.BUILD_NUMBER}<br/>" +
                    "URL: ${env.BUILD_URL}<br/>",
                to: 'sj27773@gmail.com',
                attachmentsPattern: 'trivy.txt'
        }
    }
}
